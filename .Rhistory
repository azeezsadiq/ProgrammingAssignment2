?rpois
rpois(5,10)
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
bye()
cm
class(cm)
summary(cm)
str(cm)
quantile(cm,5)
quantile(cm)
rbinom(1,2,prob=0.7)
rbinom(1,2,prob=0.7)
rbinom(1,2,prob=0.7)
rbinom(10,15,prob=0.7)
rbinom(100,15,prob=0.99)
cm(rbinom(100,15,prob=0.99))
hist(rbinom(100,15,prob=0.99))
table(rbinom(100,15,prob=0.99))
barplot(table(rbinom(100,15,prob=0.99)))
swirl()
hist(rnorm(10))
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(1000000))
data(cars)
?cars
head(cars)
plot(cars)
?plot
(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=speed,y=dist)
plot(cars$speed,carsy=dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab="Speed", ylab = "Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",subtitle="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=10:15)
10:15
c(10:15)
plot(cars, xlim = c(10, 15))
plot(cars,pch=2)
ls()
search()
list.files()
data(mtcars)
play()
dim(mtcars)
head(mtcars)
class(mtcars)
mtcars[1]
mtcars[[1]]
mtcars$mpg
mtcars[1]
class(mtcars)
unclass(mtcars)
attr(mtcars)
attributes(mtcars)
levels(mtcars)
names(mtcars)
nxt()
?boxplot
boxplot(data=mtcars,formula=mpg~cyl)
boxplot(mtcars,formula=mpg~cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
x<-C(0.18,-1.54,0.42,0.95)
x<-C(0.18,-1.54,0.42,0.95)
X<-0.18
X<- C(0.18,0.19)
x<-c(0.18,0.19)
x<-c(0.18,-1.54,0.42,0.95)
w<-(2,1,3,1)
w<-c(2,1,3,1)
w(x-0.1471)
w
w*(x-0.1471)
x-0.1471
w*(x-0.1471)
w*(x-1.077)
sum(x*(x-0.1471))
sum(w*(x-0.1471))
sum(w*(x-0.1.077))
sum(w*(x-1.077))
sum(w*(x-0.1471)^2)
sum(w*(x-1.077)^2)
sum(w*(x-0.0025)^2)
sum(w*(x-0.3)^2)
install.packages("manipulate")
install.packages("UsingR")
myPlot <- function(beta){
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library("manipulate", lib.loc="~/R/win-library/3.2")
myPlot <- function(beta){
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(-3, 2, step = 0.02))
library("datasets", lib.loc="C:/Program Files/R/R-3.2.2/library")
data(mtcars)
mtcars
lm(mpg~weight - 1, data = mtcars)
lm(mpg~wt - 1, data = mtcars)
lm(mpg~wt , data = mtcars)
lm(I(mpg - mean(mpg))~ I(wt - mean(wt)) - 1, data = galton)
lm(I(mpg - mean(mpg))~ I(wt - mean(wt)) - 1, data = mtcars)
lm(I(mpg - mean(mpg))~ I(wt - mean(wt)), data = mtcars)
mean(c(8.58, 10.46, 9.01, 9.64, 8.86))
8.58-9.31
sd(c(8.58, 10.46, 9.01, 9.64, 8.86))
8.58-9.31
-0.73/0.75
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(formula = y~x)
mean(c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42))
library("datasets", lib.loc="C:/Program Files/R/R-3.2.2/library")
load(mtcars)
data(mtcars)
data(mtcars)
fit<-lm(mtcars$mpg~mtcars$wt)
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
data(mtcars)
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
data(mtcars)
fit<-lm(mtcars$mpg~mtcars$wt)
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p2 = data.frame(predict(fit, newdata = c(3),interval = ("prediction")))
p2 = data.frame(predict(fit, newdata = data.frame(a=3),interval = ("prediction")))
View(p2)
View(p2)
p2 = data.frame(predict(fit,interval = 3))
p2 = data.frame(predict(fit,interval = "3"))
p2 = data.frame(predict(fit,interval = ("prediction")))
p2 = data.frame(predict(fit, newdata = data.frame(a=3),interval = ("prediction")))
View(p2)
View(p2)
p2
p1 = data.frame(predict(fit,interval = ("prediction")))
View(p1)
View(p1)
p2 = data.frame(predict(fit, newdata = data.frame(a=c(3)),interval = ("prediction")))
p2 <- data.frame(predict(fit, newdata = data.frame(a=c(3)),interval = ("prediction")))
p2 <- data.frame(predict(fit, newdata = data.frame(a=c(3)))
)
View(p2)
newx = data.frame(a = 3)
p2 <- data.frame(predict(fit, newdata = newx,interval = ("prediction")))
fit<-lm(mpg~wt, data = mtcars)
p2 <- data.frame(predict(fit, newdata = newx,interval = ("prediction")))
fir
fit
fit<- lm(mpg ~ wt, data=mtcars)
fit
summary(fit)
newx <- data.frame(mpg=c(3))
View(newx)
p2 <- data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p2 <- data.frame(predict(fit, newdata = newx)
)
fit
newx <- data.frame(wt=c(3))
p2 <- data.frame(predict(fit, newdata = newx,interval = ("prediction")))
View(p2)
fit<- lm(mpg ~ I(wt/2), data=mtcars)
sumCoef <- summary(fit)$coefficients
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])
fit<- lm(mpg ~ wt, data=mtcars)
sumCoef <- summary(fit)$coefficients
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2])*2
fit(mpg~wt, data=mtcars)
fit<-lm(mpg~wt, data=mtcars)
summary(fit)
resid(fit)
sum(resid(fit))
sum(resid(fit))^2
sum(resid(fit)^2)
resid(fit)^2
sum(resid(fit)^2)
a<-278.3219
fit<-lm(mpg~wt -1, data=mtcars)
sum(resid(fit)^2)
b<-3936.616
a/b
b/a
fit<-lm(mpg~wt,data =mtcars)
fit<-lm(I(mpg-mean(mpg))~wt,data =mtcars)
sum(resid(fit)^2)
fit<-lm(mpg~0,data=mtcars)
sum(resid(fit)^2)
fit<-lm(mpg~1,data=mtcars)
sum(resid(fit)^2)
fit<-lm(mpg~3,data=mtcars)
fit<-lm(mpg~2,data=mtcars)
278/1126
fit<-lm(mpg~wt,data=mtcars)
newx<-data.frame(wt=mean(mtcars$wt))
mean(mtcars$wt)
newx
p2 <- data.frame(predict(fit, newdata = newx,interval = ("confidence")))
p2
setwd("~/")
library("swirl")
swirl()
fit<-lm(child~parent, data=galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,galton$parent)
bye()
exit()
quit()
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
View(predictors)
diagnosis
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
View(testing)
View(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
View(mixtures)
data("concrete")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(concrete$CompressiveStrength)
hist(mixtures$CompressiveStrength)
?hist
hist(mixtures$CompressiveStrength,breaks=40)
hist(mixtures$CompressiveStrength,breaks=100)
hist(mixtures$Superplasticizer)
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
hist(training$Superplasticizer))
training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
log(training$Superplasticizer)
hist(log(training$(Superplasticizer+1)))
hist(log(training$Superplasticizer+1))
library(swirl)
swirl()
bye()
swirl()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Exploratory Data Analysis")
swirl()
install_from_swirl("Statistical Inference")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory_Data_Analysis")
swirl()
head(pollution)
dim(pollutin)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm,col = "blue")
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12,lwd=2)
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg<-pollution$region
reg<-table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region,data=pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution, region=="east")
head(east)
hist(east$pm25,col="green")
hist(subset(pollution,region="west)$pm25,col="green")
hist(subset(pollution,region="west")$pm25,col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
with(pollution,plot)
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,ppm,col=polltuon$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west<-subset(pollution,region=="west")
plot(west$latitude,west$pm25,"West")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
bye()
swirl()
?Devices
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
getwd()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,file = "geyserplot.png")
dev.off()
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par("lty")
plot(airquality$Wind,airquality$Ozone,set="n")
plot(airquality$Wind,set="n",airquality$Ozone)
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may<-subset(airquality,airquality$Month==5)
may<-subset(airquality,Month==5)
plot(may$Wind,may$Ozone,color="blue",pch="2")
plot(may$Wind,may$Ozone,color="blue",pch="17")
plot(may$Wind,may$Ozone,col="blue",pch="17")
points(may$Wind,may$Ozone,col="blue",pch="17")
points(may$Wind,may$Ozone,col="blue",pch=17)
may<-subset(airquality,Month!=5)
notmay<-subset(airquality,Month!=5)
points(notmay$Wind,notmay$Ozone,col="blue",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(air$quality,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main="Ozone and SOlar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col="red",pch=8,main="Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month),data=airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(5,1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
source("plot1.R",local=TRUE)
source("plot1.R",local=TRUE)
exit()
bye()
swirl()
sample(colors(),10)
bye()
swirl()
str(mpg)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c("smooth","point"))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=displ,data=mpg,color=drv)
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom="boxplot")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
g<-ggplot(mpg,aes=(displ,hwy))
g<-ggplot(mpg,aes=("displ","hwy"))
help()
g<-ggplot(mpg,aes=(displ,hwy))
g<-ggplot(data=mpg,aes=(displ,hwy))
g<-ggplot(data=mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size="4",alpha=0.5)
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
play()
names(g)
class(g)
str(g)
head(g)
nxt()
g+geom_point(aes(color=drv),size=2,alpha=0.5)+geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(color=drv)+theme_bw(base_family = "Times")
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx,myy,type="l",ylim=c(-3,3))
g<-ggplot(data=testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g
g+geom_point()
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",se=FALSE,size=2,color="black")+labs(x='Displacement',y="Highway Mileage",title="Swirl Rules!")
str(diamonds)
exit()
bye()
swirl()
buye()
bye()
bye()
install.packages(c("caret", "stringi"))
setwd("~/GitHub/ProgrammingAssignment2")
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
rm(amtrix)
rm(amatrix)
